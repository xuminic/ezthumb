#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
# Only two files are truly needed: configure.ac and Makefile.am.
# The config.h.in can be generated by autoheader, plus the extra contents. 
# The m4 directory can be empty if there was "AC_CONFIG_MACRO_DIR([m4])" in 
# configure.ac and "ACLOCAL_AMFLAGS = -I m4 --install" in Makefile.am
#
# Using "autoreconf -i" to generate all files, not "autoconf".
#
# Test plan:
# *) configure --enable-debug-build=yes
#    should be "-g -DDEBUG=3 -O0" in compiling
# *) configure --enable-debug-build=0
#    same to --enable-debug-build=no, "-O4" in compiling
# *) configure --enable-debug-build=6
#    should be "-g -DDEBUG=6 -O0" in compiling
# In MinGW, the installer should be created also:
# *) configure --with-gui=no && make release
#    should build the command line tool ezthumb.exe only, no EzthumbWin.exe
# *) configure --with-gui=gtk2 && make release
#    other options are same, which build both ezthumb.exe and EzthumbWin.exe
# In a clean Debian box
# *) configure --with-gui=yes && make
#    should issue a warning and build a command line version
# *) configure --with-gui=gtk && make release
#    same to above; the release only includes source codes.
# *) _FILE_OFFSET_BITS should be set in 32-bit box and unset in 64 bit box.
# Install gtk2-dev
# *) configure --with-gui=no && make
#    should build a command line only version
# *) configure --with-gui=gtk3 && make
#    should issue a warning but build a gtk2 version instead
# Install gtk3-dev
# *) configure && make
#    should link default gui mode with gtk3
# *) configure --with-gui=gtk2 && make
#    should link gtk2
#    make gnome-install
#    install the icon and binary to gnome environment
#    make gnome-uninstall
#    revoke the install operation

AC_PREREQ([2.68])
AC_INIT([ezthumb], [3.6.9], [xuming@users.sourceforge.net])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([main.c])
AC_CONFIG_HEADERS([config.h])
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_ARG_ENABLE([debug-build],
  AS_HELP_STRING([--enable-debug-build], 
      [Enable the debug output (yes,no,0-7)]))
AS_CASE([$enable_debug_build],
  [yes|Yes|YES], [CFLAGS="-Wall -Wextra -Wno-cast-function-type -g -DDEBUG=3 -O0"],
  [1|2|3|4|5|6|7], [CFLAGS="-Wall -Wextra -Wno-cast-function-type -g -DDEBUG=$enable_debug_build -O0"],
  [CFLAGS="-Wall -Wextra -Wno-cast-function-type -O3"])

AC_ARG_WITH([gui], 
  AS_HELP_STRING([--with-gui], 
      [Build with the Graphic User Interface [yes] (no|gtk|gtk2|gtk3)]))

AC_ARG_WITH([winxp], 
  AS_HELP_STRING([--with-winxp], 
      [Make a build for running on 32-bit Windows XP [yes] ]))
AS_IF([test "$with_winxp" = no], [
  WIN32BR=win7
  WINFFMPEG="./libmingw/ffmpeg"
], [
  WIN32BR=winxp
  WINFFMPEG="./libmingw/ffmpeg_xp"
])

case "$host_os" in
  cygwin | mingw*)
    SYSTOOL=mingw
    AS_CASE([$with_gui], [no|No|NO], [SYSGUI=CFG_GUI_OFF], [
      SYSGUI=CFG_GUI_ON
      PREFLIB=EzthumbWin])
    # Checks for WIN32 programs.
    AC_CHECK_PROG([WINDRES], [windres], [windres],
      [AC_MSG_ERROR([windres not found.])])
    AC_CHECK_PROG([NSIS], [makensis], [makensis], 
     [AC_MSG_WARN([NSIS package not installed. \
      You may not be able to create the installer executables.])])
    CPPFLAGS="$CPPFLAGS -I./libmingw/include -I./libmingw/iup/include \
	    -I$WINFFMPEG/include"
    LDFLAGS="$LDFLAGS -L./libmingw/lib -L$WINFFMPEG/lib -L./libmingw/iup"
    CFLAGS="$CFLAGS -mms-bitfields"

    # -DNONDLL is for static linking the libgd
    # -DLIBICONV_STATIC is for static linking the libiconv
    SYSDEFS="-DUNICODE -D_UNICODE -DCFG_WIN32RT -DWINVER=0x500 \
	    -DNONDLL -DLIBICONV_STATIC"
    POSTLIB="-mconsole -lgdi32"
    RELEASE="extclean dist-bzip2 installer-win"
    AC_CHECK_LIB([iconv], [libiconv_open], [],
      [AC_MSG_ERROR([libiconv not found.])])
    ;;
  *)
    SYSTOOL=unix
    CPPFLAGS="$CPPFLAGS -I./external/libcsoup -I./external/iup/include \
	    -I/usr/include/ffmpeg -I/usr/include/freetype2"
    LDFLAGS="$LDFLAGS -L./external/libcsoup"
    AC_CHECK_PROG([PKGCONFIG], [pkg-config], [pkg-config], [])
    if test "x$PKGCONFIG" = x; then
      SYSGUI=CFG_GUI_OFF
      AC_MSG_WARN([pkg-config is not found -- command line interface only])
    else
      SYSGUI=CFG_GUI_ON
      LDFLAGS="$LDFLAGS -L./external/iup/lib"
      AS_CASE([$with_gui],
        [no|No|NO], 
	  [SYSGUI=CFG_GUI_OFF],
        [2|gtk2|Gtk2|GTK2], 
	  [PKG_CHECK_MODULES([GTK], [gtk+-2.0], [
              AC_MSG_RESULT([gtk+-2.0])
              IUPCFG="USE_GTK2=1"], 
            [PKG_CHECK_MODULES([GTK], [gtk+-3.0], 
              [AC_MSG_WARN([Gtk 2.0 not found. Using Gtk 3.0 instead])],
	      [SYSGUI=CFG_GUI_OFF])]
	  )],
	[3|gtk3|Gtk3|GTK3],
          [PKG_CHECK_MODULES([GTK], [gtk+-3.0], , 
            [PKG_CHECK_MODULES([GTK], [gtk+-2.0], [
                AC_MSG_WARN([Gtk 3.0 not found. Using Gtk 2.0 instead])
	        IUPCFG="USE_GTK2=1"],
	      [SYSGUI=CFG_GUI_OFF])]
	  )],
        [PKG_CHECK_MODULES([GTK], [gtk+-3.0], 
	  [AC_MSG_NOTICE([gtk+-3.0 found])],
          [PKG_CHECK_MODULES([GTK], [gtk+-2.0], 
            [AC_MSG_NOTICE([gtk+-2.0 found]) 
	      IUPCFG="USE_GTK2=1"],
	    [SYSGUI=CFG_GUI_OFF])]
	  )])
      AS_IF([! test "$SYSGUI" = CFG_GUI_OFF], [
          CPPFLAGS="$CPPFLAGS $GTK_CFLAGS"
	  LIBS="$LIBS $GTK_LIBS -lX11"
      ])
    fi
    SYSDEFS="-D$SYSGUI" 
    RELEASE="extclean dist-bzip2"

    # Checks for IUP libraries. Rebuild them if they don't exist.
    AS_IF([test "$SYSGUI" = CFG_GUI_ON], [
      AC_CHECK_LIB([iup], [IupOpen],, [
        POSTLIB="$POSTLIB -liup"
        PREFLIB="$PREFLIB libiup"
        AC_MSG_NOTICE([The libiup will be built soon.])],
        [$LIBGUI])
      POSTLIB="$POSTLIB -liupimglib"])
    ;;
esac

AM_CONDITIONAL([XAM_MSWIN], [test x$SYSTOOL = xmingw])
AM_CONDITIONAL([XAM_GUI], [test x$SYSGUI = xCFG_GUI_ON])

# Special modification for testing FFMPEG 3.3 source package
#CPPFLAGS="-I/home/andy/working/ffmpeg-3.3 $CPPFLAGS"
#LDFLAGS="$LDFLAGS -L/home/andy/working/ffmpeg-3.3/lib"
#LIBS="$LIBS -lswresample -ldl -lpthread -llzma"

# Checks for libraries.
AC_CHECK_LIB([csoup], [smm_init],, [
  POSTLIB="$POSTLIB -lcsoup"
  PREFLIB="$PREFLIB libcsoup"
  AC_MSG_NOTICE([The libcsoup will be built soon.])])

AC_CHECK_LIB([m], [exp], [],
  [AC_MSG_ERROR([libm not found.])])
AC_CHECK_LIB([z], [zlibVersion], [],
  [AC_MSG_ERROR([zlib not found.])])
AC_CHECK_LIB([jpeg], [jpeg_read_header], [],
  [AC_MSG_ERROR([libjpeg not found.])])
AC_CHECK_LIB([png], [png_get_copyright], [],
  [AC_MSG_ERROR([libpng not found.])])
AC_CHECK_LIB([freetype], [FT_Library_Version], [],
  [AC_MSG_ERROR([Freetype not found.])])
AC_CHECK_LIB([gd], [gdImageCreate], [],
  [AC_MSG_ERROR([libgd not found.])])
AC_CHECK_LIB([avutil], [avutil_version], [],
  [AC_MSG_ERROR([libavutil not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([swscale], [swscale_version], [],
  [AC_MSG_ERROR([libswscale not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([avcodec], [avcodec_version], [],
  [AC_MSG_ERROR([libavcodec not found. Install FFMPEG dev first.])])
AC_CHECK_LIB([avformat], [avformat_version], [],
  [AC_MSG_ERROR([libavformat not found. Install FFMPEG dev first.])])

CURRLIB="$LIBS"

# Checks for header files.
# AC_INCLUDES_DEFAULT can not output header defines automatically
# You need to add these include files manually in your C codes.
AC_CHECK_HEADERS([sys/time.h],,,[AC_INCLUDES_DEFAULT])
AC_CHECK_HEADERS([libavcodec/avcodec.h libavformat/avformat.h \
    libswscale/swscale.h libavutil/avutil.h libavutil/mathematics.h \
    libavutil/imgutils.h  ft2build.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_INT64_T
AC_TYPE_UINT8_T

AC_CHECK_DECL([AV_PIX_FMT_RGB24], 
  [AC_DEFINE(HAVE_AV_PIXEL_FORMAT, 1,
    [Define 1 if you have the AVPixelFormat in the pixfmt.h.])], ,
  [#include <libavutil/pixfmt.h>]) 

AC_CHECK_MEMBER([struct AVStream.r_frame_rate], 
  [AC_DEFINE(HAVE_R_FRAME_RATE, 1,
    [Define 1 if you have the r_frame_rate in the AVStream structure.])],
  [AC_MSG_WARN([Not found AVStream.r_frame_rate, you have libav installed?])],
  [#include <libavformat/avformat.h>])
AC_CHECK_MEMBER([struct AVStream.codecpar], 
  [AC_DEFINE(HAVE_AVS_CODECPAR, 1,
    [Define 1 if you have the codecpar in the AVStream structure.])], ,
  [#include <libavformat/avformat.h>])
AC_CHECK_MEMBER([struct AVFrame.best_effort_timestamp],
  [AC_DEFINE(HAVE_AVFRAME_BEST_ETS, 1,
    [Define 1 if you have the best_effort_timestamp in the AVFrame structure.])],
  [AC_CHECK_MEMBER([struct AVFrame.pkt_pts],
    [AC_DEFINE(HAVE_AVFRAME_PKT_PTS, 1,
      [Define 1 if you have the pkt_pts in the AVFrame structure.])],
    [AC_CHECK_MEMBER([struct AVFrame.pts],
      [AC_DEFINE(HAVE_AVFRAME_PTS, 1,
        [Define 1 if you have the pts in the AVFrame structure.])],
      [AC_MSG_WARN([Not found pkt_pts/pts/best_effort_timestamp in the AVFrame structure.])],
      [#include <libavutil/avutil.h> 
       #include <libavcodec/avcodec.h])],
    [#include <libavutil/avutil.h> 
     #include <libavcodec/avcodec.h])],
  [#include <libavutil/avutil.h> 
   #include <libavcodec/avcodec.h>])
AC_CHECK_MEMBER([struct AVFormatContext.file_size],
  [AC_DEFINE(HAVE_AVFORMATCONTEXT_FILE_SIZE, 1,
    [Define 1 if you have file_size in the AVFormatContext structure.])],
  [AC_CHECK_MEMBER([struct AVFormatContext.pb],
    [AC_DEFINE(HAVE_AVFORMATCONTEXT_PB, 1, 
      [Define 1 if you have pb in the AVFormatContext structure.])],
    [AC_MSG_WARN([Not found file_size or pb in the AVFormatContext structure.])],
    [#include <libavformat/avformat.h>])],
  [#include <libavformat/avformat.h>])


# Checks for library functions.
AC_FUNC_STRTOD
AC_CHECK_FUNCS([memset strcasecmp strchr strrchr strstr strtol \
    avformat_open_input av_open_input_file avformat_find_stream_info \
    av_find_stream_info avcodec_open2 avcodec_open avformat_close_input \
    av_close_input_file av_find_best_stream av_frame_alloc av_frame_free \
    avcodec_alloc_frame av_dict_get av_metadata_get av_dump_format \
    av_stream_get_r_frame_rate av_get_media_type_string avcodec_descriptor_get \
    av_get_picture_type_char av_get_pix_fmt_name av_get_sample_fmt_name \
    avcodec_register_all av_register_all av_codec_set_pkt_timebase \
    dump_format gdImageGifAnimBegin])
AC_CHECK_FUNCS([av_packet_unref av_image_get_buffer_size av_image_fill_arrays \
    av_image_copy avcodec_receive_frame avcodec_alloc_context3])

# Checks for operating system services or capabilities.
AC_PATH_XTRA
AC_SYS_LARGEFILE

# Just for checking the function of AC_DEFINE().
# It can add an object in config.h.in by autoheader and output what I need.
# AC_DEFINE([HAVE_GUI],[1],[GUI is required])

AC_SUBST(IUPCFG)
AC_SUBST(SYSDEFS)
AC_SUBST(PREFLIB)
AC_SUBST(POSTLIB)
AC_SUBST(CURRLIB)
AC_SUBST(RELEASE)
AC_SUBST(WIN32BR)
AC_SUBST(WINFFMPEG)

# This is for Win32 GUI porting only
WIN32GUI="$LIBS -liup -liupimglib -liconv -mwindows -lkernel32 -luser32 \
  -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 \
  -luuid -lcomctl32"
AC_SUBST(WIN32GUI)

AC_CONFIG_FILES([Makefile])
AC_OUTPUT

